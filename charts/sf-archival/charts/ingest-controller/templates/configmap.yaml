kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "ingest-controller.fullname" . }}
  namespace: {{ .Release.Namespace }}
data:
  config.json: |-
    {
      "datasetURL": "http://{{ template "ingest-controller.dataset-controller.fullname" . }}",
      "datasetRawControllerURL": "http://{{ template "ingest-controller.dataset-raw-controller.fullname" . }}",
      "queryControlURL": "http://{{ template "ingest-controller.query-controller.fullname" . }}",
      "db": {
        "name": "{{ .Values.global.postgresql.postgresqlDatabase }}",
        "user": "{{ .Values.global.postgresql.postgresqlUsername }}",
        "password": "{{ .Values.global.postgresql.postgresqlPassword }}",
        "host": "{{ template "ingest-controller.postgresql.fullname" . }}",
        "port": {{ .Values.global.postgresql.servicePort }},
        "max_open_connections": {{ .Values.db.max_open_connections }},
        "max_idle_connections": {{ .Values.db.max_idle_connections }}
      },
      "compactPartitionColumnNames": ["year", "month", "day", "segment"],
      "rawPartitionColumnNames": ["year", "month", "day", "timebucket"],
      "hive": {
        "userName": "{{ template "ingest-controller.hive-server.username" . }}",
        "host": "{{ template "ingest-controller.hive-server.host" . }}",
        "port": {{ template "ingest-controller.hive-server.port" . }},
        "auth": "{{ template "ingest-controller.hive-server.auth" . }}"
      },
      "logArchivalURL": "http://{{ template "ingest-controller.log-archival.fullname" . }}",
      "schemaRegistryURL": {{ .Values.scehmaRegistryURL | quote }},
      "kafkaConnectURL": {{ .Values.archivalKafkaConnectURL | quote }},
      "kafkaBrokers": {{ .Values.global.kafkaBrokers | quote }},
      "patternsURL": {{ .Values.signatureAndKafkaAPIsURL | quote }},
      "serverPort": "{{ .Values.serverPort }}"
    }
  sink_defaults.json: |-
    {
      "max_tasks_per_topic": {{ .Values.global.maxTasksPerTopic }},
      "flush.size": 10000,
      "partitioner.class": "io.confluent.connect.storage.partitioner.SfFieldTimeBucketPartitioner",
      "path.format": "'year'=YYYY/'month'=M/'day'=d/'time-bucket'='TIME-BUCKET'",
      "locale": "US",
      "timezone": "UTC",
      "partition.field.name": "_tag_projectName, _tag_appName, _plugin, _documentType",
      "timestamp.extractor": "RecordField",
      "timestamp.field": "time",
      "schema.compatibility": "NONE",
      "rotate.schedule.interval.ms": 180000,
      "partition.duration.ms": {{ mul .Values.global.timeBucketSizeMinutes 60000 }},
      "transforms": "filter,insertsignature",
      "transforms.filter.type": "com.logarchival.MarkDrop$Value",
      "transforms.insertsignature.type": "com.signature.InsertSignature$Value",
      "transforms.insertsignature.connectorname.field": "archiver",
      "errors.tolerance": "all",
      "sf.archival.schema.keys": "_tag_projectName, _tag_appName, _plugin, _documentType",
      "behavior.on.null.values": "ignore",
{{- if or .Values.global.secrets.aws.enable .Values.global.secrets.gcs.enable .Values.global.secrets.minio.enable }}
      "connector.class": "io.confluent.connect.s3.S3SinkConnector",
      "s3.part.size": 5242880,
      "storage.class": "io.confluent.connect.s3.storage.S3Storage",
      "format.class": "io.confluent.connect.s3.format.orc.OrcFormat",
{{- if .Values.global.secrets.gcs.enable }}
      "store.url": {{ .Values.minioEndpoint | quote }},
{{- else }}
      "store.url": "s3.amazonaws.com"
{{- end }}
{{- else if .Values.global.secrets.azure.enable }}
      "connector.class": "io.confluent.connect.azureblob.AzureBlobSinkConnector",
      "azureblob.block.size": 5242880,
      "storage.class": "io.confluent.connect.azureblob.storage.AzureBlobStorage",
      "format.class": "io.confluent.connect.azureblob.format.orc.OrcFormat"
{{- end }}
    }
